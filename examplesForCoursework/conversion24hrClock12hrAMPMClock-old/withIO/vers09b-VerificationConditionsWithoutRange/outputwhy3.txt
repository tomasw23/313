theory Task
  type int
 
  type real
  
  predicate (=) 'a 'a
  
  (* use why3.BuiltIn.BuiltIn *)
  
  type bool =
    | True
    | False
  
  (* use why3.Bool.Bool *)
  
  type tuple0 =
    | Tuple0
  
  (* use why3.Tuple0.Tuple01 *)
  
  type unit = ()
  
  (* use why3.Unit.Unit *)
  
  type qtmark
  
  (* use why3.Mark.Mark *)
  
  (* use why3.Prelude.Prelude *)
  
  constant zero : int = 0
  
  constant one : int = 1
  
  predicate (<) int int
  
  predicate (>) (x:int) (y:int) = y < x
  
  predicate (<=) (x:int) (y:int) = x < y \/ x = y
  
  function (+) int int : int
  
  function (-) int : int
  
  function (*) int int : int
  
  axiom Assoc : forall x:int, y:int, z:int. ((x + y) + z) = (x + (y + z))
  
  (* clone algebra.Assoc with type t = int, function op = (+),
    prop Assoc1 = Assoc *)
  
  axiom Unit_def_l : forall x:int. (zero + x) = x
  
  axiom Unit_def_r : forall x:int. (x + zero) = x
  
  (* clone algebra.Monoid with type t1 = int, constant unit = zero,
    function op1 = (+), prop Unit_def_r1 = Unit_def_r,
    prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)
  
  axiom Inv_def_l : forall x:int. ((- x) + x) = zero
  
  axiom Inv_def_r : forall x:int. (x + (- x)) = zero
  
  (* clone algebra.Group with type t2 = int, function inv = (-),
    constant unit1 = zero, function op2 = (+), prop Inv_def_r1 = Inv_def_r,
    prop Inv_def_l1 = Inv_def_l, prop Unit_def_r2 = Unit_def_r,
    prop Unit_def_l2 = Unit_def_l, prop Assoc3 = Assoc *)
  
  axiom Comm : forall x:int, y:int. (x + y) = (y + x)
  
  (* clone algebra.Comm with type t3 = int, function op3 = (+),
    prop Comm1 = Comm *)
  
  (* meta AC function (+) *)
  
  (* clone algebra.CommutativeGroup with type t4 = int, function inv1 = (-),
    constant unit2 = zero, function op4 = (+), prop Comm2 = Comm,
    prop Inv_def_r2 = Inv_def_r, prop Inv_def_l2 = Inv_def_l,
    prop Unit_def_r3 = Unit_def_r, prop Unit_def_l3 = Unit_def_l,
    prop Assoc4 = Assoc *)
  
  axiom Assoc5 : forall x:int, y:int, z:int. ((x * y) * z) = (x * (y * z))
  
  (* clone algebra.Assoc with type t = int, function op = (*),
    prop Assoc1 = Assoc5 *)
  
  axiom Mul_distr_l :
    forall x:int, y:int, z:int. (x * (y + z)) = ((x * y) + (x * z))
  
  axiom Mul_distr_r :
    forall x:int, y:int, z:int. ((y + z) * x) = ((y * x) + (z * x))
  
  function (-) (x:int) (y:int) : int = x + (- y)
  
  (* clone algebra.Ring with type t5 = int, function (-) = (-),
    function (*) = (*), function (-) = (-), function (+) = (+),
    constant zero1 = zero, prop Mul_distr_r1 = Mul_distr_r,
    prop Mul_distr_l1 = Mul_distr_l, prop Assoc6 = Assoc5, prop Comm3 = Comm,
    prop Inv_def_r3 = Inv_def_r, prop Inv_def_l3 = Inv_def_l,
    prop Unit_def_r4 = Unit_def_r, prop Unit_def_l4 = Unit_def_l,
    prop Assoc7 = Assoc *)
  
  axiom Comm4 : forall x:int, y:int. (x * y) = (y * x)
  
  (* clone algebra.Comm with type t3 = int, function op3 = (*),
    prop Comm1 = Comm4 *)
  
  (* meta AC function (*) *)
  
  (* clone algebra.CommutativeRing with type t6 = int, function (-) = (-),
    function (*) = (*), function (-) = (-), function (+) = (+),
    constant zero2 = zero, prop Comm5 = Comm4,
    prop Mul_distr_r2 = Mul_distr_r, prop Mul_distr_l2 = Mul_distr_l,
    prop Assoc8 = Assoc5, prop Comm6 = Comm, prop Inv_def_r4 = Inv_def_r,
    prop Inv_def_l4 = Inv_def_l, prop Unit_def_r5 = Unit_def_r,
    prop Unit_def_l5 = Unit_def_l, prop Assoc9 = Assoc *)
  
  axiom Unitary : forall x:int. (one * x) = x
  
  axiom NonTrivialRing : not zero = one
  
  (* clone algebra.UnitaryCommutativeRing with type t7 = int,
    constant one1 = one, function (-) = (-), function (*) = (*),
    function (-) = (-), function (+) = (+), constant zero3 = zero,
    prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
    prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
    prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5,
    prop Comm8 = Comm, prop Inv_def_r5 = Inv_def_r,
    prop Inv_def_l5 = Inv_def_l, prop Unit_def_r6 = Unit_def_r,
    prop Unit_def_l6 = Unit_def_l, prop Assoc11 = Assoc *)
  
  predicate (>=) (x:int) (y:int) = y <= x
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Refl : forall x:int. x <= x
  
  (* clone relations.Reflexive with type t9 = int, predicate rel1 = (<=),
    prop Refl1 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Trans : forall x:int, y:int, z:int. x <= y -> y <= z -> x <= z
  
  (* clone relations.Transitive with type t10 = int, predicate rel2 = (<=),
    prop Trans1 = Trans *)
  
  (* clone relations.PreOrder with type t11 = int, predicate rel3 = (<=),
    prop Trans2 = Trans, prop Refl2 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Antisymm : forall x:int, y:int. x <= y -> y <= x -> x = y
  
  (* clone relations.Antisymmetric with type t12 = int,
    predicate rel4 = (<=), prop Antisymm1 = Antisymm *)
  
  (* clone relations.PartialOrder with type t13 = int, predicate rel5 = (<=),
    prop Antisymm2 = Antisymm, prop Trans3 = Trans, prop Refl3 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Total : forall x:int, y:int. x <= y \/ y <= x
  
  (* clone relations.Total with type t14 = int, predicate rel6 = (<=),
    prop Total1 = Total *)
  
  (* clone relations.TotalOrder with type t15 = int, predicate rel7 = (<=),
    prop Total2 = Total, prop Antisymm3 = Antisymm, prop Trans4 = Trans,
    prop Refl4 = Refl *)
  
  axiom ZeroLessOne : zero <= one
  
  axiom CompatOrderAdd :
    forall x:int, y:int, z:int. x <= y -> (x + z) <= (y + z)
  
  axiom CompatOrderMult :
    forall x:int, y:int, z:int. x <= y -> zero <= z -> (x * z) <= (y * z)
  
  (* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
    predicate (>=) = (>=), predicate (<=) = (<=), constant one2 = one,
    function (-) = (-), function (*) = (*), function (-) = (-),
    function (+) = (+), constant zero4 = zero,
    prop CompatOrderMult1 = CompatOrderMult,
    prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
    prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
    prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
    prop Unitary2 = Unitary, prop Comm9 = Comm4,
    prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
    prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
    prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
    prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)
  
  (* use int.Int *)
  
  type ref 'a =
    | Mk_ref (contents:'a)
  
  function (!) (x:ref 'a) : 'a = contents x
  
  (* use ref.Ref *)
  
  function us__ignore 'a : ()
  
  type us_private
  
  constant us_null_ext__ : us_private
  
  type us_fixed = int
  
  (* use _gnatprove_standard_th.Main_Main *)
  
  type us_type_of_heap
  
  type us_image
  
  predicate us_ignore (x:'a) = true
  
  (* use _gnatprove_standard.Main *)
  
  function andb (x:bool) (y:bool) : bool =
    match x with
    | True -> y
    | False -> False
    end
  
  function orb (x:bool) (y:bool) : bool =
    match x with
    | False -> y
    | True -> True
    end
  
  type tuple2 'a 'a1 =
    | Tuple2 'a 'a1
  
  (* use why3.Tuple2.Tuple21 *)
  
  function xorb (x:bool) (y:bool) : bool =
    match (x, y) with
    | True, False -> True
    | False, True -> True
    | _, _ -> False
    end
  
  function notb (x:bool) : bool =
    match x with
    | False -> True
    | True -> False
    end
  
  function implb (x:bool) (y:bool) : bool =
    match (x, y) with
    | True, False -> False
    | _, _ -> True
    end
  
  (* use bool.Bool1 *)
  
  function ite (b:bool) (x:'a) (y:'a) : 'a =
    match b with
    | True -> x
    | False -> y
    end
  
  (* use bool.Ite *)
  
  function bool_eq (x:bool) (y:bool) : bool = if x = y then True else False
  
  (* use _gnatprove_standard_th.Boolean_Func *)
  
  function to_int (b:bool) : int = if b = True then 1 else 0
  
  function of_int (i:int) : bool = if i = 0 then False else True
  
  constant last : int = 1
  
  constant first : int = 0
  
  predicate in_range (x:int) = x = 0 \/ x = 1
  
  predicate dynamic_property (f:int) (l:int) (x:int) = in_range x
  
  function attr__ATTRIBUTE_IMAGE bool : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check us_image
  
  function attr__ATTRIBUTE_VALUE us_image : bool
  
  (* use _gnatprove_standard.Boolean *)
  
  type integer
  
  constant first1 : int = - 2147483648
  
  constant last1 : int = 2147483647
  
  predicate in_range1 (x:int) = first1 <= x /\ x <= last1
  
  function bool_eq1 int int : bool
  
  function bool_ne int int : bool
  
  function bool_lt int int : bool
  
  function bool_le int int : bool
  
  function bool_gt int int : bool
  
  function bool_ge int int : bool
  
  axiom bool_eq_axiom :
    forall x:int. forall y:int. bool_eq1 x y = True <-> x = y
  
  axiom bool_ne_axiom :
    forall x:int. forall y:int. bool_ne x y = True <-> not x = y
  
  axiom bool_lt_axiom :
    forall x:int. forall y:int. bool_lt x y = True <-> x < y
  
  axiom bool_int__le_axiom :
    forall x:int. forall y:int. bool_le x y = True <-> x <= y
  
  axiom bool_gt_axiom :
    forall x:int. forall y:int. bool_gt x y = True <-> x > y
  
  axiom bool_ge_axiom :
    forall x:int. forall y:int. bool_ge x y = True <-> x >= y
  
  (* use _gnatprove_standard_th.Integer *)
  
  (* use _gnatprove_standard.Integer1 *)
  
  type us_split = int
  
  function bool_eq2 (x:int) (y:int) : bool = if x = y then True else False
  
  function attr__ATTRIBUTE_IMAGE1 int : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check1 us_image
  
  function attr__ATTRIBUTE_VALUE1 us_image : int
  
  function to_rep integer : int
  
  function of_rep int : integer
  
  function user_eq integer integer : bool
  
  constant dummy : integer
  
  (* clone ada__model.Discrete_Base with type t17 = integer,
    type us_split1 = us_split, type rep_type = int, constant dummy1 = dummy,
    function user_eq1 = user_eq, function of_rep1 = of_rep,
    function to_rep1 = to_rep,
    function attr__ATTRIBUTE_VALUE2 = attr__ATTRIBUTE_VALUE1,
    predicate attr__ATTRIBUTE_VALUE__pre_check2 = attr__ATTRIBUTE_VALUE__pre_check1,
    function attr__ATTRIBUTE_IMAGE2 = attr__ATTRIBUTE_IMAGE1,
    function bool_eq3 = bool_eq2,  *)
  
  axiom inversion_axiom : forall x:integer [to_rep x]. of_rep (to_rep x) = x
  
  axiom range_axiom : forall x:integer. in_range1 (to_rep x)
  
  predicate dynamic_property1 (f:int) (l:int) (x:int) = in_range1 x
  
  (* clone ada__model.Static_Discrete_Base with type t18 = integer,
    type us_split2 = us_split, type rep_type1 = int,
    predicate dynamic_property2 = dynamic_property1,
    predicate in_range2 = in_range1, constant last2 = last1,
    constant first2 = first1, constant dummy2 = dummy,
    function user_eq2 = user_eq, function of_rep2 = of_rep,
    function to_rep2 = to_rep,
    function attr__ATTRIBUTE_VALUE3 = attr__ATTRIBUTE_VALUE1,
    predicate attr__ATTRIBUTE_VALUE__pre_check3 = attr__ATTRIBUTE_VALUE__pre_check1,
    function attr__ATTRIBUTE_IMAGE3 = attr__ATTRIBUTE_IMAGE1,
    function bool_eq4 = bool_eq2, prop range_axiom1 = range_axiom,
    prop inversion_axiom1 = inversion_axiom *)
  
  axiom coerce_axiom :
    forall x:int [to_rep (of_rep x)]. in_range1 x -> to_rep (of_rep x) = x
  
  (* clone ada__model.Static_Discrete with type t19 = integer,
    type us_split3 = us_split,
    predicate dynamic_property3 = dynamic_property1,
    predicate in_range3 = in_range1, constant last3 = last1,
    constant first3 = first1, constant dummy3 = dummy,
    function user_eq3 = user_eq, function of_rep3 = of_rep,
    function to_rep3 = to_rep,
    function attr__ATTRIBUTE_VALUE4 = attr__ATTRIBUTE_VALUE1,
    predicate attr__ATTRIBUTE_VALUE__pre_check4 = attr__ATTRIBUTE_VALUE__pre_check1,
    function attr__ATTRIBUTE_IMAGE4 = attr__ATTRIBUTE_IMAGE1,
    function bool_eq5 = bool_eq2, prop coerce_axiom1 = coerce_axiom,
    prop range_axiom2 = range_axiom,
    prop inversion_axiom2 = inversion_axiom *)
  
  (* use Standard__integer *)
  
  constant t : int
  
  (* use Clock__to12__t *)
  
  (* use Standard__integer__axiom *)
  
  (* use Clock__to12__t__axiom *)
  
  axiom H : dynamic_property1 first1 last1 t
  
  axiom H1 : t >= 12
  
  constant o : int = t - 12
  
  goal WP_parameter_def : in_range1 o
end
